#!/bin/bash

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

pushd $(dirname "$0") > /dev/null

#chmod u+x configmap-create.sh
/bin/bash configmap-create.sh || exit $?

cp secret.yaml secret-default.yaml
sed  -i "s/%NAMESPACE%/default/g" secret-default.yaml
kubectl apply --overwrite=true -f secret-default.yaml || exit $?
rm -rf secret-default.yaml

cp secret.yaml secret-system.yaml
sed  -i "s/%NAMESPACE%/kube-system/g" secret-system.yaml
kubectl apply --overwrite=true -f secret-system.yaml || exit $?
rm -rf secret-system.yaml

# Create priorityClass for PAI daemon
kubectl apply --overwrite=true -f priority-class.yaml || exit $?

# Add `pai-master`, `pai-worker`, `pai-storage` label to corresponding nodes and remove irrelant labels
(
{%- for host in cluster_cfg['layout']['machine-list'] %}
    {%- if 'pai-master' in cluster_cfg['layout']['machine-list'][host] and cluster_cfg['layout']['machine-list'][host]['pai-master'] == 'true' %}
echo kubectl label --overwrite=true nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-master=true pai-worker=false || exit $?
    {%- else %}
echo kubectl label nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-master- || exit $?
    {%- endif %}
    {%- if 'pai-worker' in cluster_cfg['layout']['machine-list'][host] and cluster_cfg['layout']['machine-list'][host]['pai-worker'] == 'true' %}
echo kubectl label --overwrite=true nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-worker=true || exit $?
    {%- else %}
echo kubectl label nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-worker- || exit $?
    {%- endif %}
    {%- if 'pai-storage' in cluster_cfg['layout']['machine-list'][host] and cluster_cfg['layout']['machine-list'][host]['pai-storage'] == 'true' %}
echo kubectl label --overwrite=true nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-storage=true || exit $?
    {%- else %}
echo kubectl label nodes {{ cluster_cfg['layout']['machine-list'][host]['hostname'] }} pai-storage- || exit $?
    {%- endif %}
{%- endfor %}
) | parallel || exit $?

# create pai-storage namespace
if ! kubectl get namespace | grep -q "pai-storage" ; then
    kubectl create namespace pai-storage || exit $?
fi

popd > /dev/null
